import spacy
import time

DEV = True
if DEV:
    PREDICTED = "./data/predicted-4096.txt"
    SOURCE = "./data/gtc-correct.txt"
else:
    PREDICTED = "./data/predicted.txt"
    SOURCE = "./data/gtc-correct.txt"

nlp = spacy.load("en_core_web_lg")
correct = [
    "user firstname res firstname",
    "de deutsch",
    "nocomments",
    "you can disable comments for the current post using the nocomments",
    "if builder support app",
    "if builder support app",
    "added excerpts option to rst dir postlist directive",
    "blog languages",
    "compile catalog http babel edgewall org wiki documentation setup html id4",
    "hda device on some laptops like acer aspire vn7 592g insyde",
]
incorrect = [
    "user firstname res lastname",
    "de deutsche",
    "nocoments",
    "you can disable comments for the current post using the nocomment",
    "if build support app",
    "if build support app",
    "added exceprts option to rst dir postlist directive",
    "blog language",
    "compile catlog http babel edgewall org wiki documentation setup html id4",
    "hda device on some laptops liek acer aspire vn7 592g insyde",
]
predicted = [
    "user first name is lastname.",
    "de Deutsche",
    "nocoments.",
    "you can disable comments for the current post using the app.",
    "if build support app.",
    "if build support app.",
    "added expert's option to rest direct postlist directive.",
    "blog language",
    "compile catlog http babel edgewall.org wiki documentation setup.html id4.",
    "that device on some laptops likely can aspire to 5G inside.",
]

if __name__ == "__main__":

    bc = 0
    c = 0

    st = time.time()
    for i in range(min(len(correct), len(incorrect), len(predicted))):
        inc_vec = nlp(incorrect[i])
        pre_vec = nlp(predicted[i])
        cor_vec = nlp(correct[i])

        print(f"c[{i}]:", cor_vec, "<->", f"i[{i}]:", inc_vec, cor_vec.similarity(inc_vec))
        print(f"p[{i}]:", pre_vec, "<->", f"i[{i}]:", inc_vec, pre_vec.similarity(inc_vec))

        c_i_sim = cor_vec.similarity(inc_vec)
        p_i_sim = pre_vec.similarity(inc_vec)

        if (c_i_sim > p_i_sim):
            bc += 1
            continue
        c += 1

    print(f"good predictions: {c}")
    print(f"bad predictions:  {bc}")

    et = time.time()
    print(f"time taken: {et - st}")
